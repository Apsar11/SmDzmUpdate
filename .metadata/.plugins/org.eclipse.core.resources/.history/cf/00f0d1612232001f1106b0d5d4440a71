package com.resource;


import javax.xml.namespace.QName;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import java.util.Iterator;
import java.util.Set;

public class UsernameTokenHandler implements SOAPHandler<SOAPMessageContext> {

    private static final String USERNAME = "Apsar";
    private static final String PASSWORD = "Apsar@11";

    @Override
    public Set<QName> getHeaders() {
        return null;
    }

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        Boolean isoutbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        
        try {
            SOAPMessage soapMessage = context.getMessage();
            soapMessage.writeTo(System.out);
            System.out.println(); // For better log readability
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Exception class: " + e.getClass().getName());
            System.err.println("Exception message: " + e.getMessage());
        }


        if (!isoutbound) { // Incoming message
            try {
                SOAPMessage soapMessage = context.getMessage();
                SOAPHeader soapHeader = soapMessage.getSOAPHeader();

                if (soapHeader == null) {
                    throw new SOAPException("No header found in the message.");
                }

                SOAPEnvelope soapEnvelope = soapMessage.getSOAPPart().getEnvelope();
                String prefix = soapEnvelope.getPrefix();

                QName securityQName = new QName("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security", "wsse");
                Iterator<?> it = soapHeader.getChildElements(securityQName);

                if (!it.hasNext()) {
                    throw new SOAPException("No Security element found in the message.");
                }

                SOAPElement securityElement = (SOAPElement) it.next();
                QName usernameTokenQName = new QName("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "UsernameToken", "wsse");
                Iterator<?> utIterator = securityElement.getChildElements(usernameTokenQName);

                if (!utIterator.hasNext()) {
                    throw new SOAPException("No UsernameToken element found in the Security header.");
                }

                SOAPElement usernameTokenElement = (SOAPElement) utIterator.next();
                String username = usernameTokenElement.getElementsByTagNameNS("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Apsar").item(0).getTextContent();
                String password = usernameTokenElement.getElementsByTagNameNS("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText", "Apsar@11").item(0).getTextContent();

                if (!USERNAME.equals(username) || !PASSWORD.equals(password)) {
                    throw new SOAPException("Invalid username or password.");
                }

            } catch (SOAPException e) {
                System.out.println("Error handling SOAP message: " + e.getMessage());
                return false; // Stop processing the message if authentication fails
            }
        }

        return true; // Continue processing if authentication succeeds
    }

    @Override
    public boolean handleFault(SOAPMessageContext context) {
        return true;
    }

    @Override
    public void close(MessageContext context) {
    }
}

